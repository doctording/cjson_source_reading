#include <cstdio>  
#include <cstdlib>  
#include <cstring>    
#include <string>
#include <vector>
#include <map>
#include <cmath>
#include <iostream>
#include <queue>
#include <map>
#include <stack>
#include <list>
#include <sstream>
#include <algorithm>

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(double * item, const char *num)
{
	double n = 0, sign = 1, scale = 0;
	int subscale = 0, signsubscale = 1;

	if (*num == '-')
		sign = -1, num++;	/* Has sign? */
	if (*num == '0')
		num++;		/* is zero */
	if (*num >= '1' && *num <= '9')
		do
			n = (n * 10.0) + (*num++ - '0');
		while (*num >= '0' && *num <= '9');	/* Number? */
	if (*num == '.' && num[1] >= '0' && num[1] <= '9') {
		num++;
		do
			n = (n * 10.0) + (*num++ - '0'), scale--;
		while (*num >= '0' && *num <= '9');
	}			/* Fractional part? */
	if (*num == 'e' || *num == 'E') {	/* Exponent? */
		num++;
		if (*num == '+')
			num++;
		else if (*num == '-')
			signsubscale = -1, num++;	/* With sign? */
		while (*num >= '0' && *num <= '9')
			subscale = (subscale * 10) + (*num++ - '0');	/* Number? */
	}

	n = sign * n * pow(10.0, (scale + subscale * signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */

	*item = n;
	//item->valuedouble = n;
	//item->valueint = (int) n;
	//item->type = cJSON_Number;
	return num;
}

int main(int argc, const char *argv[])
{
	/* a bunch of json: */
	const char *text1 = "-123.6,\"xx\":123";
	double item = NULL;
	const char* tmp = parse_number(&item, text1);

	return 0;
}